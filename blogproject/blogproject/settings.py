"""
Django settings for blogproject project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os  
#optimizacionORM - nplusone - importacion libreria para registrar datos de nplusone
import logging 
#optimizacionORM - nplusone

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ukz72g)*267@$nvdk**+6#+a*nyzh_1t3o2=@wxtpga$cew)2^'

# SECURITY WARNING: don't run with debug turned on in production!

#Profiling - Primeros cambios, el Debug=TRUE se elimino ya que esta siendo remplazado por el otro que es una linea completamente nueva
#            Estos cambios se aceptan completos
SILKY_PYTHON_PROFILER = True
DEBUG = os.getenv('DJANGO_DEBUG', 'true') == 'true' #Profiling : DEBUG variable, se cambia en el cmd con set DJANGO_DEBUG=false
#Profiling - Fin de primeros cambios, abajo hay mas

#optimizacionORM - Sin esto no funciona lo del debugToolbar
INTERNAL_IPS = ['127.0.0.1']
#optimizacionORM



ALLOWED_HOSTS = []



# Application definition

INSTALLED_APPS = [
    'blogapp',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    #optimizacionORM - nplusone
    'nplusone.ext.django',  # Añade la aplicación de nplusone
    #optimizacionORM - nplusone 

    # App del blog
    'ckeditor',
    'ckeditor_uploader',

    "accounts",  # new Esta se esta agregando para hacer el sign up

    "compressor", # Habilita django-compressor para minificar archivos CSS y JS

]

#optimizacionORM - nplusone
# Configuración de logging para nplusone
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'nplusone': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
#optimizacionORM - nplusone

MIDDLEWARE = [
    #optimizacionORM - nplusone
    'nplusone.ext.django.NPlusOneMiddleware', #TAgregando nplusone al middleware
    #optimizacionORM - nplusone
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Middleware para servir archivos estáticos comprimidos en producción sin necesidad de nginx
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware', 
]
#optimizacionORM - nplusone 
NPLUSONE_RAISE = False  # Si se tiene en False no levanta mensaje de error. En true manda errores en la pantalla principal
NPLUSONE_LOGGER = logging.getLogger('nplusone')
#optimizacionORM - nplusone

#optimizacionORM - Para agregar a installed apps y a Middleware
INSTALLED_APPS += ['debug_toolbar']
MIDDLEWARE = ['debug_toolbar.middleware.DebugToolbarMiddleware'] + MIDDLEWARE
#optimizacionORM

#Profiling - Cuartos cambios(Arriba hay mas (DEBUG)), antes esta seccion no existia es algo completamente nuevo se acepta por completo
if DEBUG: 
    INSTALLED_APPS += ['silk']
    MIDDLEWARE.insert(0, 'silk.middleware.SilkyMiddleware')  # al inicio del middleware
#Profiling - Fin de cuartos cambios en este caso en settings. Mas abajo no hay mas cambios

ROOT_URLCONF = 'blogproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates', BASE_DIR / 'blogapp/templates/blogapp'],  # Esta modificacion agrega las plantillas del proyecto tambien
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blogproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = '/static/'
# Esta línea define la URL base para acceder a los archivos estáticos en tu sitio web.

STATIC_URL = 'https://cdn.jsdelivr.net/gh/ianthompson11/bocaraca_blog@main/cdn_static/blogapp/'
# Esta líne define la URL base para acceder a los archivos estáticos de la aplicación blogapp.

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'blogapp/static'),  # Carpeta de blogapp
]
# Esta lista define los directorios donde Django buscará archivos estáticos además de los de las aplicaciones.


STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Esta línea define el directorio donde Django recolectará todos los archivos estáticos cuando ejecutes 'python manage.py collectstatic'.
# Asegúrate de que la carpeta 'staticfiles' exista en la raíz de tu proyecto.

# Define cómo Django debe servir los archivos estáticos comprimidos
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# Comprime automáticamente archivos y agrega hash para control de versiones en caché


# Define los buscadores de archivos estáticos. El de compressor se encarga de encontrarlos para minificarlos
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',        # Busca archivos estáticos en STATICFILES_DIRS
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',    # Busca archivos en la carpeta /static de cada app
    'compressor.finders.CompressorFinder',                        # Habilita la búsqueda de archivos para django-compressor
]

# Activa la minificación y procesamiento offline (anticipado) de CSS/JS
COMPRESS_ENABLED = True                 # Activa django-compressor
COMPRESS_OFFLINE = True                # Preprocesa y guarda los archivos minificados al ejecutar `compress`
COMPRESS_ROOT = STATIC_ROOT            # Usa los archivos que fueron reunidos con collectstatic
COMPRESS_CSS_HASHING_METHOD = 'content'  # Cambia nombre de archivo cuando su contenido cambia (para cache busting)


# PARA IMAGENES EN EL CAMPO TEXTO  SE AGREGÓ

MEDIA_URL = '/media/'
# Esta línea define la URL base para acceder a los archivos de medios subidos por el usuario.

MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
# Esta línea define el directorio donde Django guardará los archivos de medios subidos por el usuario.
# Asegúrate de que la carpeta 'media' exista en la raíz de tu proyecto.

CKEDITOR_UPLOAD_PATH = "uploads/"
# Esta línea define la ruta dentro de MEDIA_ROOT donde se guardarán las imágenes subidas a través del editor CKEditor.



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = "/"  # new Esta linea redirije al usuario a / despues de un ligin exitoso
LOGOUT_REDIRECT_URL = "/"  # new Esta linea redirije al usuario a / despues de presionar el boton de cerrar sesion

#Esto es configuracion para la parte de la integracion de Redis como cache
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}